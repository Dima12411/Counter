{"version":3,"sources":["components/Button.tsx","bll/counterReducer.ts","components/Counter.tsx","components/PropertiesForCounter.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["Button","props","className","onClick","callback","disabled","button","initialState","startValue","maxValue","value","message","errorMessage","setMessageAC","type","payload","setErrorMessageAC","error","counterReducer","state","action","Counter","counter","useSelector","dispatch","useDispatch","useEffect","disabledButtonInc","disabledButtonReset","PropertiesForCounter","useState","setDisabled","disabledButtonSet","classNameForMaxInput","classNameForStartInput","onChange","e","currentTarget","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4aaf14a.chunk.js","sourcesContent":["import React from \"react\";\n\ntype propsButtonType = {\n    button: string\n    disabled: boolean\n    callback: () => void\n}\n\nconst Button = (props: propsButtonType) => {\n    return (\n        <div>\n            <button className=\"button\"\n                    onClick={props.callback}\n                    disabled={props.disabled}\n            >{props.button}\n            </button>\n        </div>\n    )\n}\n\n\nexport default Button;","const initialState = {\n    startValue: 0,\n    maxValue: 5,\n    value: 0,\n    message: false,\n    errorMessage: false\n\n}\n\nconst counterReducer = (state: InitialStateType = initialState, action: AllActionsType) => {\n    switch(action.type) {\n        case \"SET-VALUE\":\n            return {\n                ...state,\n                value: state.startValue\n            }\n        case \"PLUS_VALUE\":\n            return {\n                ...state,\n                value: state.value + 1\n            }\n        case \"RESET-VALUE\":\n            return {\n                ...state,\n                value: state.startValue\n            }\n        case \"SET_START_VAlUE\":\n            return {\n                ...state,\n                startValue: action.payload.value\n            }\n        case \"SET_MAX_VAlUE\":\n            return {\n                ...state,\n                maxValue: action.payload.value\n            }\n        case \"SET-MESSAGE\":\n            return {\n                ...state,\n                message: action.payload.message\n            }\n        case \"SET-ERROR-MESSAGE\":\n            return {\n                ...state,\n                errorMessage: action.payload.error\n            }\n        default:\n            return state\n    }\n}\n\nexport const setValueAC = () => {\n    return {\n        type: 'SET-VALUE',\n\n    } as const\n}\nexport const plusValueAC = () => {\n    return {\n        type: 'PLUS_VALUE',\n    } as const\n}\nexport const resetValueAC = () => {\n    return {\n        type: 'RESET-VALUE'\n    } as const\n}\nexport const setMaxValueAC = (value: number) => {\n    return {\n        type: 'SET_MAX_VAlUE',\n        payload: {value}\n    } as const\n}\nexport const setStartValueAC = (value: number) => {\n    return {\n        type: 'SET_START_VAlUE',\n        payload: {value}\n    } as const\n}\nexport const setMessageAC = (message: boolean) => {\n    return {\n        type: 'SET-MESSAGE',\n        payload: {message}\n    } as const\n}\nexport const setErrorMessageAC = (error: boolean) => {\n    return {\n        type: 'SET-ERROR-MESSAGE',\n        payload: {error}\n    } as const\n}\n\n\nexport type InitialStateType = typeof initialState\ntype AllActionsType =\n    | PlusNumberType\n    | SetMaxValueType\n    | ResetValueType\n    | SetStartValueType\n    | SetMessageType\n    | SetErrorMessage\n    | SetValueType\n\ntype PlusNumberType = ReturnType<typeof plusValueAC>\ntype SetMaxValueType = ReturnType<typeof setMaxValueAC>\ntype ResetValueType = ReturnType<typeof resetValueAC>\ntype SetStartValueType = ReturnType<typeof setStartValueAC>\ntype SetMessageType = ReturnType<typeof setMessageAC>\ntype SetErrorMessage = ReturnType<typeof setErrorMessageAC>\ntype SetValueType = ReturnType<typeof setValueAC>\n\nexport default counterReducer;","import React, {useEffect, useState} from \"react\";\nimport Button from \"./Button\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootReducerType} from \"../bll/store\";\nimport {InitialStateType, plusValueAC, resetValueAC, setErrorMessageAC} from \"../bll/counterReducer\";\n\nconst Counter = () => {\n    const counter = useSelector<RootReducerType, InitialStateType>(state => state.counter)\n    const dispatch = useDispatch()\n    const plusNumberHandler = () => {\n        dispatch(plusValueAC())\n    }\n    const resetNumberHandler = () => {\n        dispatch(resetValueAC())\n    }\n\n    useEffect(() => {\n        if (counter.maxValue < 0 || counter.startValue < 0 || counter.maxValue === counter.startValue\n            || counter.startValue > counter.maxValue) {\n            dispatch(setErrorMessageAC(true))\n        } else {\n            dispatch(setErrorMessageAC(false))\n        }\n    }, [counter.startValue, counter.maxValue])\n\n    const disabledButtonInc =\n        counter.errorMessage || counter.message\n            ? true\n            : counter.value === counter.maxValue ? true : false\n\n    const disabledButtonReset =\n        counter.errorMessage || counter.message\n            ? true\n            : counter.value === counter.startValue ? true : false\n\n    return (\n        <div>\n            <div className=\"body\">\n                <div className=\"borderForNumber\">\n                    <div className=\"numberForCounter\">\n                        {counter.errorMessage\n                            ? <span className=\"error-message\">Incorrect value!</span>\n                            : counter.message\n                                ? <span className=\"message\">Enter values and press \"set\"</span>\n                                : <span\n                                    className={counter.value === counter.maxValue ? \"redNumber\" : \"propertiesForNumber\"}>\n                                    {counter.value}</span>\n                        }\n                    </div>\n                </div>\n                <div className=\"borderForButton\">\n                    <div>\n                        <Button\n                            button={\"inc\"}\n                            callback={plusNumberHandler}\n                            disabled={disabledButtonInc}\n                        />\n                    </div>\n                    <div>\n                        <Button button={\"reset\"}\n                                disabled={disabledButtonReset}\n                                callback={resetNumberHandler}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Counter;","import React, {ChangeEvent, useState} from \"react\";\nimport Button from \"./Button\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootReducerType} from \"../bll/store\";\nimport {\n    InitialStateType,\n    setMaxValueAC,\n    setMessageAC,\n    setStartValueAC,\n    setValueAC\n} from \"../bll/counterReducer\";\n\nconst PropertiesForCounter = () => {\n    const counter = useSelector<RootReducerType, InitialStateType>(state => state.counter)\n    const dispatch = useDispatch()\n    const [disabled, setDisabled] = useState<boolean>(true)\n\n    const startNumberHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(setStartValueAC(+e.currentTarget.value))\n        dispatch(setMessageAC(true))\n        setDisabled(false)\n    }\n    const maxNumberHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(setMaxValueAC(+e.currentTarget.value))\n        dispatch(setMessageAC(true))\n        setDisabled(false)\n    }\n    const setButtonHandler = () => {\n        dispatch(setMessageAC(false))\n        dispatch(setValueAC())\n        setDisabled(true)\n    }\n\n    const disabledButtonSet = counter.startValue < 0 || counter.maxValue < 0 || counter.startValue === counter.maxValue\n        ? true\n        : disabled\n\n    const classNameForMaxInput = counter.maxValue < 0 || counter.maxValue === counter.startValue\n    || counter.startValue > counter.maxValue\n        ? \"redMax\"\n        : \"input-max\"\n\n    const classNameForStartInput = counter.startValue < 0 || counter.startValue === counter.maxValue\n    || counter.startValue > counter.maxValue\n        ? \"redStart\"\n        : \"input\"\n    return (\n        <div>\n            <div className=\"body\">\n                <div className=\"borderForInput\">\n                    <div>\n                        <span className=\"span-value\">Max value:</span>\n                        <input type=\"number\"\n                               value={counter.maxValue}\n                               onChange={maxNumberHandler}\n                               className={classNameForMaxInput}\n                        />\n                    </div>\n                    <div>\n                        <span className=\"span-value\">Start value:</span>\n                        <input type=\"number\"\n                               value={counter.startValue}\n                               onChange={startNumberHandler}\n                               className={classNameForStartInput}\n                        />\n                    </div>\n                </div>\n                <div className=\"borderForButton2\">\n                    <div>\n                        <Button button={\"set\"}\n                                disabled={disabledButtonSet}\n                                callback={setButtonHandler}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PropertiesForCounter;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Counter from \"./components/Counter\";\nimport PropertiesForCounter from \"./components/PropertiesForCounter\";\n\n\nfunction App() {\n    // useEffect(() => {\n    //     let NumberAsString = localStorage.getItem('numberForCounter')\n    //     if (NumberAsString) {\n    //         let newValue = JSON.parse(NumberAsString)\n    //         setNumber(newValue)\n    //     }\n    //     let startValueAsString = localStorage.getItem('startValue')\n    //     if (startValueAsString) {\n    //         let newValue = JSON.parse(startValueAsString)\n    //         setStart(newValue)\n    //     }\n    //     let maxValueAsString = localStorage.getItem('maxValue')\n    //     if (maxValueAsString) {\n    //         let newValue = JSON.parse(maxValueAsString)\n    //         setMax(newValue)\n    //     }\n    // }, [])\n    // useEffect(() => {\n    //     localStorage.setItem('numberForCounter', JSON.stringify(number))\n    //     localStorage.setItem('startValue', JSON.stringify(start))\n    //     localStorage.setItem('maxValue', JSON.stringify(max))\n    // }, [number, start, max])\n\n\n    return (\n        <div className=\"App\">\n            <div className=\"propertiesForCounter\">\n                <PropertiesForCounter/>\n            </div>\n            <div className=\"counter\">\n                <Counter/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\nimport counterReducer from \"./counterReducer\";\n\nconst rootReducer = combineReducers({\n    counter: counterReducer,\n})\n\nexport type RootReducerType = ReturnType<typeof rootReducer>\nconst store = createStore(rootReducer)\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./bll/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}